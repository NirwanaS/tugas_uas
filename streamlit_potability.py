# -*- coding: utf-8 -*-
"""streamlit-potability.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VFmKuLfSId2Qh7cmfe12gB6S-3j2B5Zj
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
from xgboost import XGBClassifier
from sklearn.preprocessing import MinMaxScaler

# Fungsi untuk load model dan scaler
def load_model():
    model = XGBClassifier(eval_metric='logloss', random_state=42)
    model.load_model("xgboost_model.json")
    return model

def load_scaler():
    with open("scaler.pkl", "rb") as file:
        scaler = pickle.load(file)
    return scaler

# Header aplikasi
st.title("Prediksi Water Potability")
st.markdown("Aplikasi ini memprediksi potabilitas air berdasarkan beberapa parameter input.")

# Form input pengguna
st.sidebar.header("Masukkan Parameter Data")
def user_input():
    ph = st.sidebar.slider("pH", 0.0, 14.0, 7.0)
    Hardness = st.sidebar.slider("Hardness", 0.0, 400.0, 200.0)
    Solids = st.sidebar.slider("Solids", 0.0, 50000.0, 20000.0)
    Chloramines = st.sidebar.slider("Chloramines", 0.0, 13.0, 5.0)
    Sulfate = st.sidebar.slider("Sulfate", 0.0, 500.0, 250.0)
    Conductivity = st.sidebar.slider("Conductivity", 0.0, 800.0, 400.0)
    Organic_carbon = st.sidebar.slider("Organic Carbon", 0.0, 30.0, 15.0)
    Trihalomethanes = st.sidebar.slider("Trihalomethanes", 0.0, 120.0, 60.0)
    Turbidity = st.sidebar.slider("Turbidity", 0.0, 10.0, 5.0)

    data = {
        "ph": ph,
        "Hardness": Hardness,
        "Solids": Solids,
        "Chloramines": Chloramines,
        "Sulfate": Sulfate,
        "Conductivity": Conductivity,
        "Organic_carbon": Organic_carbon,
        "Trihalomethanes": Trihalomethanes,
        "Turbidity": Turbidity
    }

    return pd.DataFrame(data, index=[0])

input_data = user_input()
st.write("### Data yang diinput")
st.write(input_data)

# Load model dan scaler
model = load_model()
scaler = load_scaler()

# Proses prediksi
scaled_data = scaler.transform(input_data)
prediction = model.predict(scaled_data)
prediction_proba = model.predict_proba(scaled_data)

# Output hasil prediksi
if prediction[0] == 1:
    st.success("Air ini layak untuk diminum (Potable).")
else:
    st.error("Air ini tidak layak untuk diminum (Not Potable).")

st.write("### Probabilitas Prediksi")
st.write(f"Not Potable: {prediction_proba[0][0]*100:.2f}%")
st.write(f"Potable: {prediction_proba[0][1]*100:.2f}%")